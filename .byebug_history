c
to_amount(balance)
balance
n
self.debit
self.credit
last_balance
n
last
n
exit
Decimal("1230.30")
"1230.30".to_f
"125.30".to_f +"1230.30".to_f
"125.30".to_f +"1230.30"
"125.30"+"1230.30"
"12.3060".to_d
"12.3060".round(2)
"%.2f" % "12.3000"
"12.3000".to_f
self.debit.to_d
self.debit
self.debit.to_f
self.debit
self.credit
last_balance
n
last
n
exit
(self.credit ? self.credit.to_f+last_balance : last_balance-self.debit.to_f)
last_balance
n
nn
n
"%2.f" "2632.80"
"%2f" "2632.80"
self.debit
"%2f" self.debit
"%2f", self.debit
 self.debit, "%2f"
 self.debit "%2f"
"%2f", self.debit
self.debit
"%2f" self.debit
self.debit.to_f
self.debit
self.balance
 (self.credit ? self.credit.to_f+last_balance : last_balance-self.debit.to_f)
 (self.credit ? self.credit.to_f+last_balance : last_balance-self.debit.to_f).round(2)
last_balance
n
last
n
c
last
n
c
History.last
n
History.last
self
exit
balance
n
c
balance
n
balance
n
c
History.last.balance
n
History.last.balance
n
self.debit
exit
History.last
History.last.balance.to_f+self.debit.to_f
History.last.balance.to_f
History.last.balance
History.last
self
c
History.find 4
c
n
params
exit
100000-self.debit.to_f
last_balance - self.debit.to_f
self.debit.to_f
self.debit.to_i
self.debit
self.credit
last_balance
n
self
last
n
c
Package.where(name: name)
name
c
Package.where(name: name)
Package.pluck(:name)
name
c
pkgid
n
c
dc
c
Category.where(name: params[:category]).first.id
params
c
Category.where(name: params[:category])
Category.where(name: params[:category]).first.id
params
c
params
dparams
c
@milk
c
@milk
@dahi
c
status
c
self
c
status
c
self
c
self
c
self
History.last.balance
History.last
History.lat
last
self.credit
self
c
result
result.count
c
result.count
c
params[:cash]
c
params
c
@history.valid?
n
c
@history.errors.full_messages
@history.valid?
c
@history.errors.full_messages
@history.errors.count
@history.valid?
@history
c
history.valid?
c
history.valid?
c
history.valid?
c
history.valid?
c
history.valid?
history
c
History.delete_all
c
History.delete_all
History.count
history.errors.count
history.errors
history.error
history.valid?
history.is_valid?
history.isvalid?
history.valid
c
history.errors.full_messages
history.errors
c
n
c
history.errors.count
history.errors.full_messages
history.errors
status
c
history.save
history
c
self
c
JSON.parse h.particular
h.particular
h=History.new(params[:order].permit!)
History.new(params[:order].permit!)
History.new(params[:order])
History.new( {"particular" => {"total"=>"ss"}})
History.new {"particular" => {"total"=>"ss"}}
History.new
History.new params[:order]
params[:order]
prams[:order]
params
c
x=History.new(debit: 100, slot: 'M', particular: "{/dfdfsf/}")
x=History.new(debit: 100, slot: 'M', particular: "{}")
x=History.new(debit: 100, slot: 'M', particular: "ddd")
x=History.new(debit: 100, slot: 'M')
x=History.new(debit: 100)
x=History.new()
x=History.new input_hash
input_hash
n
c
params
input_hash
n
c
n
c
n
history
n
c
x["particular"]
x={}
r
r["particular"] =  r["particular"].to_json
r["particular"]
r=params[:order]
params[:order]
c
x
x["particular"] = x["particular"].to_json
x["particular"]
x=params
params
c
JSON.parse result
result
c
History.where(created_at: from..to)c
History.where(created_at: from..to)
